/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package ti.draganddrop;

import android.content.ClipData;
import android.content.ClipDescription;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.drawable.ColorDrawable;
import android.graphics.drawable.Drawable;
import android.view.DragEvent;
import android.view.View;
import android.widget.Toast;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.proxy.TiViewProxy;

@Kroll.module(name="TitaniumDragAndDrop", id="ti.draganddrop")
public class TitaniumDragAndDropModule extends KrollModule
{
	// Standard Debugging variables
	private static final String LCAT = "TitaniumDragAndDropModule";
	private static final boolean DBG = TiConfig.LOGD;

	private View v;

	private static class MyDragShadowBuilder extends View.DragShadowBuilder {

		// The drag shadow image, defined as a drawable thing
		private static Drawable shadow;

		// Defines the constructor for myDragShadowBuilder
		public MyDragShadowBuilder(View v) {

			// Stores the View parameter passed to myDragShadowBuilder.
			super(v);

			// Creates a draggable image that will fill the Canvas provided by the system.
			shadow = new ColorDrawable(Color.LTGRAY);
		}

		// Defines a callback that sends the drag shadow dimensions and touch point back to the
		// system.
		@Override
		public void onProvideShadowMetrics (Point size, Point touch) {
			// Defines local variables
			int width, height;

			// Sets the width of the shadow to half the width of the original View
			width = getView().getWidth() / 2;

			// Sets the height of the shadow to half the height of the original View
			height = getView().getHeight() / 2;

			// The drag shadow is a ColorDrawable. This sets its dimensions to be the same as the
			// Canvas that the system will provide. As a result, the drag shadow will fill the
			// Canvas.
			shadow.setBounds(0, 0, width, height);

			// Sets the size parameter's width and height values. These get back to the system
			// through the size parameter.
			size.set(width, height);

			// Sets the touch point's position to be in the middle of the drag shadow
			touch.set(width / 2, height / 2);
		}

		// Defines a callback that draws the drag shadow in a Canvas that the system constructs
		// from the dimensions passed in onProvideShadowMetrics().
		@Override
		public void onDrawShadow(Canvas canvas) {
			// Draws the ColorDrawable in the Canvas passed in from the system.
			shadow.draw(canvas);
		}
	}

	protected class myDragEventListener implements View.OnDragListener {

		// This is the method that the system calls when it dispatches a drag event to the
		// listener.
		public boolean onDrag(View v, DragEvent event) {

			// Defines a variable to store the action type for the incoming event
			final int action = event.getAction();

			// Handles each of the expected events
			switch(action) {

				case DragEvent.ACTION_DRAG_STARTED:

					// Determines if this View can accept the dragged data
					if (event.getClipDescription().hasMimeType(ClipDescription.MIMETYPE_TEXT_PLAIN)) {
						// Invalidate the view to force a redraw in the new tint
						v.invalidate();

						// returns true to indicate that the View can accept the dragged data.
						return true;

					}

					// Returns false. During the current drag and drop operation, this View will
					// not receive events again until ACTION_DRAG_ENDED is sent.
					return false;

				case DragEvent.ACTION_DRAG_ENTERED:
				case DragEvent.ACTION_DRAG_EXITED:
					// Invalidate the view to force a redraw in the new tint
					v.invalidate();

					return true;

				case DragEvent.ACTION_DRAG_LOCATION:
					// Ignore the event
					return true;

				case DragEvent.ACTION_DROP:
					// Gets the item containing the dragged data
					ClipData.Item item = event.getClipData().getItemAt(0);

					// Gets the text data from the item.
					String dragData = item.getText().toString();

					// Displays a message containing the dragged data.
					Toast.makeText(TiApplication.getAppCurrentActivity(), "Dragged data is " + dragData, Toast.LENGTH_LONG).show();

					// Invalidates the view to force a redraw
					v.invalidate();

					// Returns true. DragEvent.getResult() will return true.
					return true;

				case DragEvent.ACTION_DRAG_ENDED:
					// Invalidates the view to force a redraw
					v.invalidate();

					// Does a getResult(), and displays what happened.
					if (event.getResult()) {
						Toast.makeText(TiApplication.getAppCurrentActivity(), "The drop was handled.", Toast.LENGTH_LONG).show();

					} else {
						Toast.makeText(TiApplication.getAppCurrentActivity(), "The drop didn't work.", Toast.LENGTH_LONG).show();

					}

					// returns true; the value is ignored.
					return true;

				// An unknown action type was received.
				default:
					Log.e("DragDrop Example","Unknown action type received by OnDragListener.");
					break;
			}

			return false;
		}
	};

	@Kroll.method
	public void startDragging(Object viewProxy, String identifier) {
		v = ((TiViewProxy) viewProxy).getOrCreateView().getOuterView();

		ClipData.Item item = new ClipData.Item(identifier);
		View.OnDragListener dragListener = new myDragEventListener();

		v.setOnDragListener(dragListener);

		// Create a new ClipData using the tag as a label, the plain text MIME type, and
		// the already-created item. This will create a new ClipDescription object within the
		// ClipData, and set its MIME type entry to "text/plain"
		ClipData dragData = new ClipData(identifier, new String[] { ClipDescription.MIMETYPE_TEXT_PLAIN }, item);

		// Instantiates the drag shadow builder.
		View.DragShadowBuilder myShadow = new MyDragShadowBuilder(v);

		// Starts the drag
		v.startDrag(dragData,  // the data to be dragged
				myShadow,  // the drag shadow builder
				null,      // no need to use local data
				0          // flags (not currently used, set to 0)
		);
	}
}

